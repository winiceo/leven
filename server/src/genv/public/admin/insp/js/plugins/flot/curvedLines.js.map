{"version":3,"sources":["public/admin/insp/js/plugins/flot/curvedLines.js"],"names":[],"mappings":"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","file":"public/admin/insp/js/plugins/flot/curvedLines.js","sourcesContent":["/* The MIT License\n\n Copyright (c) 2011 by Michael Zinsmaier and nergal.dev\n Copyright (c) 2012 by Thomas Ritou\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n\n/*\n\n ____________________________________________________\n\n what it is:\n ____________________________________________________\n\n curvedLines is a plugin for flot, that tries to display lines in a smoother way.\n The plugin is based on nergal.dev's work https://code.google.com/p/flot/issues/detail?id=226\n and further extended with a mode that forces the min/max points of the curves to be on the\n points. Both modes are achieved through adding of more data points\n => 1) with large data sets you may get trouble\n => 2) if you want to display the points too, you have to plot them as 2nd data series over the lines\n\n && 3) consecutive x data points are not allowed to have the same value\n\n This is version 0.5 of curvedLines so it will probably not work in every case. However\n the basic form of use descirbed next works (:\n\n Feel free to further improve the code\n\n ____________________________________________________\n\n how to use it:\n ____________________________________________________\n\n var d1 = [[5,5],[7,3],[9,12]];\n\n var options = { series: { curvedLines: {  active: true }}};\n\n $.plot($(\"#placeholder\"), [{data = d1, lines: { show: true}, curvedLines: {apply: true}}], options);\n\n _____________________________________________________\n\n options:\n _____________________________________________________\n\n active:           bool true => plugin can be used\n apply:            bool true => series will be drawn as curved line\n fit:              bool true => forces the max,mins of the curve to be on the datapoints\n curvePointFactor  int  defines how many \"virtual\" points are used per \"real\" data point to\n emulate the curvedLines (points total = real points * curvePointFactor)\n fitPointDist:     int  defines the x axis distance of the additional two points that are used\n to enforce the min max condition.\n\n + line options (since v0.5 curved lines use flots line implementation for drawing\n => line options like fill, show ... are supported out of the box)\n\n */\n\n/*\n *  v0.1   initial commit\n *  v0.15  negative values should work now (outcommented a negative -> 0 hook hope it does no harm)\n *  v0.2   added fill option (thanks to monemihir) and multi axis support (thanks to soewono effendi)\n *  v0.3   improved saddle handling and added basic handling of Dates\n *  v0.4   rewritten fill option (thomas ritou) mostly from original flot code (now fill between points rather than to graph bottom), corrected fill Opacity bug\n *  v0.5   rewritten instead of implementing a own draw function CurvedLines is now based on the processDatapoints flot hook (credits go to thomas ritou).\n * \t\t   This change breakes existing code however CurvedLines are now just many tiny straight lines to flot and therefore all flot lines options (like gradient fill,\n * \t       shadow) are now supported out of the box\n *  v0.6   flot 0.8 compatibility and some bug fixes\n */\n\n(function($) {\n\n    var options = {\n        series : {\n            curvedLines : {\n                active : false,\n                apply: false,\n                fit : false,\n                curvePointFactor : 20,\n                fitPointDist : undefined\n            }\n        }\n    };\n\n    function init(plot) {\n\n        plot.hooks.processOptions.push(processOptions);\n\n        //if the plugin is active register processDatapoints method\n        function processOptions(plot, options) {\n            if (options.series.curvedLines.active) {\n                plot.hooks.processDatapoints.unshift(processDatapoints);\n            }\n        }\n\n        //only if the plugin is active\n        function processDatapoints(plot, series, datapoints) {\n            var nrPoints = datapoints.points.length / datapoints.pointsize;\n            var EPSILON = 0.5; //pretty large epsilon but save\n\n            if (series.curvedLines.apply == true && series.originSeries === undefined && nrPoints > (1 + EPSILON)) {\n                if (series.lines.fill) {\n\n                    var pointsTop = calculateCurvePoints(datapoints, series.curvedLines, 1)\n                        ,pointsBottom = calculateCurvePoints(datapoints, series.curvedLines, 2); //flot makes sure for us that we've got a second y point if fill is true !\n\n                    //Merge top and bottom curve\n                    datapoints.pointsize = 3;\n                    datapoints.points = [];\n                    var j = 0;\n                    var k = 0;\n                    var i = 0;\n                    var ps = 2;\n                    while (i < pointsTop.length || j < pointsBottom.length) {\n                        if (pointsTop[i] == pointsBottom[j]) {\n                            datapoints.points[k] = pointsTop[i];\n                            datapoints.points[k + 1] = pointsTop[i + 1];\n                            datapoints.points[k + 2] = pointsBottom[j + 1];\n                            j += ps;\n                            i += ps;\n\n                        } else if (pointsTop[i] < pointsBottom[j]) {\n                            datapoints.points[k] = pointsTop[i];\n                            datapoints.points[k + 1] = pointsTop[i + 1];\n                            datapoints.points[k + 2] = k > 0 ? datapoints.points[k-1] : null;\n                            i += ps;\n                        } else {\n                            datapoints.points[k] = pointsBottom[j];\n                            datapoints.points[k + 1] = k > 1 ? datapoints.points[k-2] : null;\n                            datapoints.points[k + 2] = pointsBottom[j + 1];\n                            j += ps;\n                        }\n                        k += 3;\n                    }\n                } else if (series.lines.lineWidth > 0) {\n                    datapoints.points = calculateCurvePoints(datapoints, series.curvedLines, 1);\n                    datapoints.pointsize = 2;\n                }\n            }\n        }\n\n        //no real idea whats going on here code mainly from https://code.google.com/p/flot/issues/detail?id=226\n        //if fit option is selected additional datapoints get inserted before the curve calculations in nergal.dev s code.\n        function calculateCurvePoints(datapoints, curvedLinesOptions, yPos) {\n\n            var points = datapoints.points, ps = datapoints.pointsize;\n            var num = curvedLinesOptions.curvePointFactor * (points.length / ps);\n\n            var xdata = new Array;\n            var ydata = new Array;\n\n            var curX = -1;\n            var curY = -1;\n            var j = 0;\n\n            if (curvedLinesOptions.fit) {\n                //insert a point before and after the \"real\" data point to force the line\n                //to have a max,min at the data point.\n\n                var fpDist;\n                if(typeof curvedLinesOptions.fitPointDist == 'undefined') {\n                    //estimate it\n                    var minX = points[0];\n                    var maxX = points[points.length-ps];\n                    fpDist = (maxX - minX) / (500 * 100); //x range / (estimated pixel length of placeholder * factor)\n                } else {\n                    //use user defined value\n                    fpDist = curvedLinesOptions.fitPointDist;\n                }\n\n                for (var i = 0; i < points.length; i += ps) {\n\n                    var frontX;\n                    var backX;\n                    curX = i;\n                    curY = i + yPos;\n\n                    //add point X s\n                    frontX = points[curX] - fpDist;\n                    backX = points[curX] + fpDist;\n\n                    var factor = 2;\n                    while (frontX == points[curX] || backX == points[curX]) {\n                        //inside the ulp\n                        frontX = points[curX] - (fpDist * factor);\n                        backX = points[curX] + (fpDist * factor);\n                        factor++;\n                    }\n\n                    //add curve points\n                    xdata[j] = frontX;\n                    ydata[j] = points[curY];\n                    j++;\n\n                    xdata[j] = points[curX];\n                    ydata[j] = points[curY];\n                    j++;\n\n                    xdata[j] = backX;\n                    ydata[j] = points[curY];\n                    j++;\n                }\n            } else {\n                //just use the datapoints\n                for (var i = 0; i < points.length; i += ps) {\n                    curX = i;\n                    curY = i + yPos;\n\n                    xdata[j] = points[curX];\n                    ydata[j] = points[curY];\n                    j++;\n                }\n            }\n\n            var n = xdata.length;\n\n            var y2 = new Array();\n            var delta = new Array();\n            y2[0] = 0;\n            y2[n - 1] = 0;\n            delta[0] = 0;\n\n            for (var i = 1; i < n - 1; ++i) {\n                var d = (xdata[i + 1] - xdata[i - 1]);\n                if (d == 0) {\n                    //point before current point and after current point need some space in between\n                    return [];\n                }\n\n                var s = (xdata[i] - xdata[i - 1]) / d;\n                var p = s * y2[i - 1] + 2;\n                y2[i] = (s - 1) / p;\n                delta[i] = (ydata[i + 1] - ydata[i]) / (xdata[i + 1] - xdata[i]) - (ydata[i] - ydata[i - 1]) / (xdata[i] - xdata[i - 1]);\n                delta[i] = (6 * delta[i] / (xdata[i + 1] - xdata[i - 1]) - s * delta[i - 1]) / p;\n            }\n\n            for (var j = n - 2; j >= 0; --j) {\n                y2[j] = y2[j] * y2[j + 1] + delta[j];\n            }\n\n            //   xmax  - xmin  / #points\n            var step = (xdata[n - 1] - xdata[0]) / (num - 1);\n\n            var xnew = new Array;\n            var ynew = new Array;\n            var result = new Array;\n\n            xnew[0] = xdata[0];\n            ynew[0] = ydata[0];\n\n            result.push(xnew[0]);\n            result.push(ynew[0]);\n\n            for ( j = 1; j < num; ++j) {\n                //new x point (sampling point for the created curve)\n                xnew[j] = xnew[0] + j * step;\n\n                var max = n - 1;\n                var min = 0;\n\n                while (max - min > 1) {\n                    var k = Math.round((max + min) / 2);\n                    if (xdata[k] > xnew[j]) {\n                        max = k;\n                    } else {\n                        min = k;\n                    }\n                }\n\n                //found point one to the left and one to the right of generated new point\n                var h = (xdata[max] - xdata[min]);\n\n                if (h == 0) {\n                    //similar to above two points from original x data need some space between them\n                    return [];\n                }\n\n                var a = (xdata[max] - xnew[j]) / h;\n                var b = (xnew[j] - xdata[min]) / h;\n\n                ynew[j] = a * ydata[min] + b * ydata[max] + ((a * a * a - a) * y2[min] + (b * b * b - b) * y2[max]) * (h * h) / 6;\n\n                result.push(xnew[j]);\n                result.push(ynew[j]);\n            }\n\n            return result;\n        }\n\n    }//end init\n\n    $.plot.plugins.push({\n        init : init,\n        options : options,\n        name : 'curvedLines',\n        version : '0.5'\n    });\n\n})(jQuery);\n"],"sourceRoot":"/deploy/kevio/kevio/es6"}