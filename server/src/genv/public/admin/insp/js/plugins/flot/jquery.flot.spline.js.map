{"version":3,"sources":["public/admin/insp/js/plugins/flot/jquery.flot.spline.js"],"names":[],"mappings":"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","file":"public/admin/insp/js/plugins/flot/jquery.flot.spline.js","sourcesContent":["/**\n * Flot plugin that provides spline interpolation for line graphs\n * author: Alex Bardas < alex.bardas@gmail.com >\n * modified by: Avi Kohn https://github.com/AMKohn\n * based on the spline interpolation described at:\n *\t\t http://scaledinnovation.com/analytics/splines/aboutSplines.html\n *\n * Example usage: (add in plot options series object)\n *\t\tfor linespline:\n *\t\t\tseries: {\n *\t\t\t\t...\n *\t\t\t\tlines: {\n *\t\t\t\t\tshow: false\n *\t\t\t\t},\n *\t\t\t\tsplines: {\n *\t\t\t\t\tshow: true,\n *\t\t\t\t\ttension: x, (float between 0 and 1, defaults to 0.5),\n *\t\t\t\t\tlineWidth: y (number, defaults to 2),\n *\t\t\t\t\tfill: z (float between 0 .. 1 or false, as in flot documentation)\n *\t\t\t\t},\n *\t\t\t\t...\n *\t\t\t}\n *\t\tareaspline:\n *\t\t\tseries: {\n *\t\t\t\t...\n *\t\t\t\tlines: {\n *\t\t\t\t\tshow: true,\n *\t\t\t\t\tlineWidth: 0, (line drawing will not execute)\n *\t\t\t\t\tfill: x, (float between 0 .. 1, as in flot documentation)\n *\t\t\t\t\t...\n *\t\t\t\t},\n *\t\t\t\tsplines: {\n *\t\t\t\t\tshow: true,\n *\t\t\t\t\ttension: 0.5 (float between 0 and 1)\n *\t\t\t\t},\n *\t\t\t\t...\n *\t\t\t}\n *\n */\n\n(function($) {\n    'use strict'\n\n    /**\n     * @param {Number} x0, y0, x1, y1: coordinates of the end (knot) points of the segment\n     * @param {Number} x2, y2: the next knot (not connected, but needed to calculate p2)\n     * @param {Number} tension: control how far the control points spread\n     * @return {Array}: p1 -> control point, from x1 back toward x0\n     * \t\t\t\t\tp2 -> the next control point, returned to become the next segment's p1\n     *\n     * @api private\n     */\n    function getControlPoints(x0, y0, x1, y1, x2, y2, tension) {\n\n        var pow = Math.pow,\n            sqrt = Math.sqrt,\n            d01, d12, fa, fb, p1x, p1y, p2x, p2y;\n\n        //  Scaling factors: distances from this knot to the previous and following knots.\n        d01 = sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2));\n        d12 = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));\n\n        fa = tension * d01 / (d01 + d12);\n        fb = tension - fa;\n\n        p1x = x1 + fa * (x0 - x2);\n        p1y = y1 + fa * (y0 - y2);\n\n        p2x = x1 - fb * (x0 - x2);\n        p2y = y1 - fb * (y0 - y2);\n\n        return [p1x, p1y, p2x, p2y];\n    }\n\n    var line = [];\n\n    function drawLine(points, ctx, height, fill, seriesColor) {\n        var c = $.color.parse(seriesColor);\n\n        c.a = typeof fill == \"number\" ? fill : .3;\n        c.normalize();\n        c = c.toString();\n\n        ctx.beginPath();\n        ctx.moveTo(points[0][0], points[0][1]);\n\n        var plength = points.length;\n\n        for (var i = 0; i < plength; i++) {\n            ctx[points[i][3]].apply(ctx, points[i][2]);\n        }\n\n        ctx.stroke();\n\n        ctx.lineWidth = 0;\n        ctx.lineTo(points[plength - 1][0], height);\n        ctx.lineTo(points[0][0], height);\n\n        ctx.closePath();\n\n        if (fill !== false) {\n            ctx.fillStyle = c;\n            ctx.fill();\n        }\n    }\n\n    /**\n     * @param {Object} ctx: canvas context\n     * @param {String} type: accepted strings: 'bezier' or 'quadratic' (defaults to quadratic)\n     * @param {Array} points: 2 points for which to draw the interpolation\n     * @param {Array} cpoints: control points for those segment points\n     *\n     * @api private\n     */\n    function queue(ctx, type, points, cpoints) {\n        if (type === void 0 || (type !== 'bezier' && type !== 'quadratic')) {\n            type = 'quadratic';\n        }\n        type = type + 'CurveTo';\n\n        if (line.length == 0) line.push([points[0], points[1], cpoints.concat(points.slice(2)), type]);\n        else if (type == \"quadraticCurveTo\" && points.length == 2) {\n            cpoints = cpoints.slice(0, 2).concat(points);\n\n            line.push([points[0], points[1], cpoints, type]);\n        }\n        else line.push([points[2], points[3], cpoints.concat(points.slice(2)), type]);\n    }\n\n    /**\n     * @param {Object} plot\n     * @param {Object} ctx: canvas context\n     * @param {Object} series\n     *\n     * @api private\n     */\n\n    function drawSpline(plot, ctx, series) {\n        // Not interested if spline is not requested\n        if (series.splines.show !== true) {\n            return;\n        }\n\n        var cp = [],\n        // array of control points\n            tension = series.splines.tension || 0.5,\n            idx, x, y, points = series.datapoints.points,\n            ps = series.datapoints.pointsize,\n            plotOffset = plot.getPlotOffset(),\n            len = points.length,\n            pts = [];\n\n        line = [];\n\n        // Cannot display a linespline/areaspline if there are less than 3 points\n        if (len / ps < 4) {\n            $.extend(series.lines, series.splines);\n            return;\n        }\n\n        for (idx = 0; idx < len; idx += ps) {\n            x = points[idx];\n            y = points[idx + 1];\n            if (x == null || x < series.xaxis.min || x > series.xaxis.max || y < series.yaxis.min || y > series.yaxis.max) {\n                continue;\n            }\n\n            pts.push(series.xaxis.p2c(x) + plotOffset.left, series.yaxis.p2c(y) + plotOffset.top);\n        }\n\n        len = pts.length;\n\n        // Draw an open curve, not connected at the ends\n        for (idx = 0; idx < len - 2; idx += 2) {\n            cp = cp.concat(getControlPoints.apply(this, pts.slice(idx, idx + 6).concat([tension])));\n        }\n\n        ctx.save();\n        ctx.strokeStyle = series.color;\n        ctx.lineWidth = series.splines.lineWidth;\n\n        queue(ctx, 'quadratic', pts.slice(0, 4), cp.slice(0, 2));\n\n        for (idx = 2; idx < len - 3; idx += 2) {\n            queue(ctx, 'bezier', pts.slice(idx, idx + 4), cp.slice(2 * idx - 2, 2 * idx + 2));\n        }\n\n        queue(ctx, 'quadratic', pts.slice(len - 2, len), [cp[2 * len - 10], cp[2 * len - 9], pts[len - 4], pts[len - 3]]);\n\n        drawLine(line, ctx, plot.height() + 10, series.splines.fill, series.color);\n\n        ctx.restore();\n    }\n\n    $.plot.plugins.push({\n        init: function(plot) {\n            plot.hooks.drawSeries.push(drawSpline);\n        },\n        options: {\n            series: {\n                splines: {\n                    show: false,\n                    lineWidth: 2,\n                    tension: 0.5,\n                    fill: false\n                }\n            }\n        },\n        name: 'spline',\n        version: '0.8.2'\n    });\n})(jQuery);\n"],"sourceRoot":"/deploy/kevio/kevio/es6"}